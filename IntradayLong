package com.ts.test.strategy;

import java.util.ArrayDeque;
import java.util.Iterator;

import com.ts.test.model.Candle;
import com.ts.test.model.IBar;

public class IntradayLong {
/**
 *  Trend following:
 *  
 	  *  * -->Locate stock that breaking out up(down) strongly 
	30 	 * -->Select 2 SMA to apply to the chart (ex. 5 and 10) 
	31 	 * -->Make sure price has not been touching the 5 SMA or 10 SMA excessively in the last 10 bars 
	32 	 * -->Wait for the price to close above(below) both moving averages in the counter direction  
	33 	 * of the primary trend on the SAME BAR 
	34 	 * -->Enter the trade on the next bar 
 */
	public static boolean maCrossover(ArrayDeque<IBar> candles){
		boolean buy = false;
		//int n = 3;
		if(lastNCandlesCrossoverPercent(candles, 3) &&	//at least last 3 candles crossover short SMA/EMA to above long SMA/EMA //- 10%
		   lastNCandlesNotTouchingBothMa(candles, 10) &&	//last 10 candles close, low, open >= short SMA/EMA AND >= long SMA/EMA
			closeAboveOnBlack(candles)	//trend is up, close above short SMA/EMA and long SMA/EMA on the last BLACK! candle
		){
			buy = true;
		}
		return buy;
	}
	
	private static boolean lastNCandlesCrossoverPercent(ArrayDeque<IBar> candles, int n){
		boolean b = false;
		boolean g = false;
		int gCnt = 0;
		
		Candle c;
		Iterator<IBar> it = candles.iterator();
		
		for(int i=0;i<n;i++){
			c = (Candle)it.next();
			b = c.maShort()>c.maLong();
			if(!b)
				break;
		}
		
		return b;
	}
	
	private static boolean lastNCandlesNotTouchingBothMa(ArrayDeque<IBar> candles, int n){
		boolean b = false;
		
		Candle c;
		Iterator<IBar> it = candles.iterator();
		double open;
		double close;
		double low;
		double maShort;
		double maLong;
		
		for(int i=0;i<n;i++){
			c = (Candle)it.next();
			open = c.open();
			close = c.close();
			low = c.low();
			maShort = c.maShort();
			maLong = c.maLong();
			
			b = open>maShort && close>maShort && low > maShort && open>maLong && close>maLong && low > maLong;
			
			if(!b)
				break;
		}
		
		return b;
	}
	
	private static boolean closeAboveOnBlack(ArrayDeque<IBar> candles){
		boolean b = false;
		Candle c = (Candle)candles.peekFirst();
		
		if(c.close()>c.maShort() && c.close()>maLong() && c.direction()==Constants.BLACK)
			b= true;
		
		return b;
	}
}
